document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('network-canvas');
    const ctx = canvas.getContext('2d');

    // Set canvas size
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Node and connection settings
    const nodes = [];
    const nodeCount = 15; // Fewer nodes to avoid clutter, adjustable
    const maxDistance = 200; // Increased distance for a wider network
    const dataPulses = [];
    const glowColor = '#00aaff'; // Neon blue glow, inspired by the diagram
    const nodeColors = ['#ff69b4', '#ff4500', '#32cd32', '#4169e1', '#ff9900']; // Varied colors for AWS services

    // Node class (represents AWS services)
    class Node {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.radius = Math.random() * 6 + 4; // Node size between 4-10px
            this.dx = (Math.random() - 0.5) * 1.5; // Slower movement
            this.dy = (Math.random() - 0.5) * 1.5;
            this.color = nodeColors[Math.floor(Math.random() * nodeColors.length)]; // Random service color
        }

        update() {
            this.x += this.dx;
            this.y += this.dy;

            // Bounce off edges
            if (this.x < 0 || this.x > canvas.width) this.dx *= -1;
            if (this.y < 0 || this.y > canvas.height) this.dy *= -1;
        }

        draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            ctx.fillStyle = this.color; // Service-specific color
            ctx.fill();
            // Glowing effect
            ctx.shadowBlur = 15;
            ctx.shadowColor = this.color;
            ctx.fill();
            ctx.shadowBlur = 0; // Reset shadow
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.stroke();
        }
    }

    // Data pulse class (glowing dots traveling along lines)
    class DataPulse {
        constructor(startNode, endNode) {
            this.startNode = startNode;
            this.endNode = endNode;
            this.progress = 0;
            this.speed = 0.015; // Slower speed for a smooth glow
        }

        update() {
            this.progress += this.speed;
            return this.progress < 1;
        }

        draw() {
            const x = this.startNode.x + (this.endNode.x - this.startNode.x) * this.progress;
            const y = this.startNode.y + (this.endNode.y - this.startNode.y) * this.progress;
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, Math.PI * 2);
            ctx.fillStyle = '#ffffff'; // White pulse with glow
            ctx.shadowBlur = 10;
            ctx.shadowColor = '#00aaff';
            ctx.fill();
            ctx.shadowBlur = 0; // Reset shadow
        }
    }

    // Create nodes
    for (let i = 0; i < nodeCount; i++) {
        nodes.push(new Node());
    }

    // Animation loop
    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'rgba(0, 0, 50, 0.1)'; // Dark blue semi-transparent background for glow effect
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Update and draw nodes
        nodes.forEach(node => {
            node.update();
            node.draw();
        });

        // Draw glowing lines (wires/circuits) between nearby nodes
        for (let i = 0; i < nodes.length; i++) {
            for (let j = i + 1; j < nodes.length; j++) {
                const dx = nodes[i].x - nodes[j].x;
                const dy = nodes[i].y - nodes[j].y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < maxDistance) {
                    const opacity = 1 - distance / maxDistance; // Fade with distance
                    ctx.beginPath();
                    ctx.moveTo(nodes[i].x, nodes[i].y);
                    ctx.lineTo(nodes[j].x, nodes[j].y);
                    ctx.strokeStyle = `rgba(0, 170, 255, ${opacity})`; // Neon blue glowing lines
                    ctx.lineWidth = 2;
                    ctx.shadowBlur = 10;
                    ctx.shadowColor = '#00aaff';
                    ctx.stroke();
                    ctx.shadowBlur = 0; // Reset shadow

                    // Randomly add data pulses
                    if (Math.random() < 0.005) { // Reduced frequency for a subtle effect
                        dataPulses.push
